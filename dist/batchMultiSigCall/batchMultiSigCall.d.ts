import { ChainId } from "@kirobo/ki-eth-fct-provider-ts";
import { ethers } from "ethers";
import { RequiredKeys } from "types";
import { verifyCall } from "./methods/checkers";
import { create, createMultiple, createPlugin, createWithEncodedData, createWithPlugin, exportFCT, getCall, importEncodedFCT, importFCT, setFromAddress } from "./methods/FCT";
import { createTypedData, getAllRequiredApprovals, getParamsFromCall, handleTo, handleValue, setOptions, verifyParams } from "./methods/helpers";
import { getPlugin, getPluginClass, getPluginData } from "./methods/plugins";
import { getComputedVariable, getExternalVariable, getOutputVariable, getVariable } from "./methods/variables";
import { BatchMultiSigCallConstructor, ComputedVariables, IFCTOptions, IMSCallInput, RequiredFCTOptions, StrictMSCallInput } from "./types";
export declare class BatchMultiSigCall {
    protected FCT_Controller: ethers.utils.Interface;
    protected FCT_BatchMultiSigCall: ethers.utils.Interface;
    protected batchMultiSigSelector: string;
    protected version: string;
    protected chainId: ChainId;
    fromAddress: string;
    protected computedVariables: ComputedVariables[];
    protected calls: RequiredKeys<IMSCallInput, "nodeId">[];
    protected _options: IFCTOptions;
    constructor(input?: BatchMultiSigCallConstructor);
    get options(): RequiredFCTOptions;
    get strictCalls(): StrictMSCallInput[];
    setOptions: typeof setOptions;
    setFromAddress: typeof setFromAddress;
    getPlugin: typeof getPlugin;
    getPluginClass: typeof getPluginClass;
    createPlugin: typeof createPlugin;
    create: typeof create;
    createWithEncodedData: typeof createWithEncodedData;
    createWithPlugin: typeof createWithPlugin;
    createMultiple: typeof createMultiple;
    exportFCT: typeof exportFCT;
    importFCT: typeof importFCT;
    importEncodedFCT: typeof importEncodedFCT;
    getCall: typeof getCall;
    getPluginData: typeof getPluginData;
    getAllRequiredApprovals: typeof getAllRequiredApprovals;
    protected getVariable: typeof getVariable;
    protected getOutputVariable: typeof getOutputVariable;
    protected getExternalVariable: typeof getExternalVariable;
    protected getComputedVariable: typeof getComputedVariable;
    protected createTypedData: typeof createTypedData;
    protected getParamsFromCall: typeof getParamsFromCall;
    protected verifyParams: typeof verifyParams;
    protected handleTo: typeof handleTo;
    protected handleValue: typeof handleValue;
    protected verifyCall: typeof verifyCall;
}
