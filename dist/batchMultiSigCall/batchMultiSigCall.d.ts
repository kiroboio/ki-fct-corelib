import { ChainId } from "@kirobo/ki-eth-fct-provider-ts";
import { ethers } from "ethers";
import { DeepPartial } from "../types";
import { FCTCalls, Options } from "./classes";
import { addComputed, create, createMultiple, createPlugin, decodeParams, exportFCT, getAllRequiredApprovals, getCall, getComputedVariable, getExternalVariable, getOutputVariable, getPlugin, getPluginClass, getPluginData, getVariable, handleVariableValue, importEncodedFCT, importFCT } from "./methods";
import { BatchMultiSigCallConstructor, ComputedVariable, DecodedCalls, ICallDefaults, IComputed, IFCTOptions, RequiredFCTOptions, StrictMSCallInput, TypedDataDomain } from "./types";
import * as utils from "./utils";
export declare class BatchMultiSigCall {
    FCT_Controller: ethers.utils.Interface;
    FCT_BatchMultiSigCall: ethers.utils.Interface;
    batchMultiSigSelector: string;
    version: string;
    chainId: ChainId;
    domain: TypedDataDomain;
    randomId: string;
    _computed: Required<IComputed>[];
    _calls: FCTCalls;
    _options: Options;
    constructor(input?: BatchMultiSigCallConstructor);
    get options(): RequiredFCTOptions;
    get calls(): StrictMSCallInput[];
    get decodedCalls(): DecodedCalls[];
    get computed(): Required<IComputed>[];
    get convertedComputed(): ComputedVariable[];
    setOptions: (options: DeepPartial<IFCTOptions>) => IFCTOptions;
    setCallDefaults: (callDefault: DeepPartial<ICallDefaults>) => ICallDefaults;
    addComputed: typeof addComputed;
    getPlugin: typeof getPlugin;
    getPluginClass: typeof getPluginClass;
    createPlugin: typeof createPlugin;
    create: typeof create;
    createMultiple: typeof createMultiple;
    exportFCT: typeof exportFCT;
    importFCT: typeof importFCT;
    importEncodedFCT: typeof importEncodedFCT;
    getCall: typeof getCall;
    getPluginData: typeof getPluginData;
    getAllRequiredApprovals: typeof getAllRequiredApprovals;
    getVariable: typeof getVariable;
    getOutputVariable: typeof getOutputVariable;
    getExternalVariable: typeof getExternalVariable;
    getComputedVariable: typeof getComputedVariable;
    decodeParams: typeof decodeParams;
    handleVariableValue: typeof handleVariableValue;
    static utils: typeof utils;
}
