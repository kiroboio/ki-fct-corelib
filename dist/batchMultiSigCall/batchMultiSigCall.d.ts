import { ChainId } from "@kirobo/ki-eth-fct-provider-ts";
import { ethers } from "ethers";
import { RequiredKeys } from "../types";
import { _getCalls, _getComputedVariables, _getDecodedCalls, create, createMultiple, createPlugin, createTypedData, createWithEncodedData, createWithPlugin, decodeParams, exportFCT, getAllRequiredApprovals, getCall, getComputedVariable, getExternalVariable, getOutputVariable, getParamsFromCall, getPlugin, getPluginClass, getPluginData, getVariable, handleTo, handleValue, importEncodedFCT, importFCT, setCallDefaults, setOptions, verifyCall } from "./methods";
import { BatchMultiSigCallConstructor, DecodedCalls, ICallDefaults, IFCTOptions, IMSCallInput, RequiredFCTOptions, StrictMSCallInput } from "./types";
export declare class BatchMultiSigCall {
    protected FCT_Controller: ethers.utils.Interface;
    protected FCT_BatchMultiSigCall: ethers.utils.Interface;
    protected batchMultiSigSelector: string;
    protected version: string;
    protected chainId: ChainId;
    protected _calls: RequiredKeys<IMSCallInput, "nodeId">[];
    protected _options: IFCTOptions;
    protected _callDefault: ICallDefaults;
    constructor(input?: BatchMultiSigCallConstructor);
    get options(): RequiredFCTOptions;
    get calls(): StrictMSCallInput[];
    get decodedCalls(): DecodedCalls[];
    get computedVariables(): import("./types").ComputedVariables[];
    setOptions: typeof setOptions;
    setCallDefaults: typeof setCallDefaults;
    getPlugin: typeof getPlugin;
    getPluginClass: typeof getPluginClass;
    createPlugin: typeof createPlugin;
    create: typeof create;
    createWithEncodedData: typeof createWithEncodedData;
    createWithPlugin: typeof createWithPlugin;
    createMultiple: typeof createMultiple;
    exportFCT: typeof exportFCT;
    importFCT: typeof importFCT;
    importEncodedFCT: typeof importEncodedFCT;
    getCall: typeof getCall;
    getPluginData: typeof getPluginData;
    getAllRequiredApprovals: typeof getAllRequiredApprovals;
    protected getVariable: typeof getVariable;
    protected getOutputVariable: typeof getOutputVariable;
    protected getExternalVariable: typeof getExternalVariable;
    protected getComputedVariable: typeof getComputedVariable;
    protected createTypedData: typeof createTypedData;
    protected getParamsFromCall: typeof getParamsFromCall;
    protected handleTo: typeof handleTo;
    protected handleValue: typeof handleValue;
    protected decodeParams: typeof decodeParams;
    protected verifyCall: typeof verifyCall;
    protected _getComputedVariables: typeof _getComputedVariables;
    protected _getDecodedCalls: typeof _getDecodedCalls;
    protected _getCalls: typeof _getCalls;
}
