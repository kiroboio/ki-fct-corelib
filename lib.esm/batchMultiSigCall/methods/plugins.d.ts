import { getPlugin as getPluginProvider, PluginInstance } from "@kiroboio/fct-plugins";
import { BatchMultiSigCall } from "../batchMultiSigCall";
export declare function getPlugin(this: BatchMultiSigCall, index: number): Promise<PluginInstance>;
export declare function getPluginClass(this: BatchMultiSigCall, index: number): Promise<ReturnType<typeof getPluginProvider>>;
export declare function getPluginData(this: BatchMultiSigCall, index: number): Promise<{
    protocol: "ERC20" | "ERC721" | "ERC1155" | "TOKEN_MATH" | "TOKEN_VALIDATOR" | "UNISWAP" | "UTILITY" | "SUSHISWAP" | "PARASWAP" | "YEARN" | "COMPOUND_V2" | "COMPOUND_V3" | "1INCH" | "CURVE" | "CHAINLINK" | "SECURE_STORAGE" | "RADIANTV2" | "ROCKETPOOL" | "LIDO" | "COMPUTED_VARIABLE" | "VALIDATION_VARIABLE" | "AaveV3" | "GMX" | "KIROBO_MULTICALL_CSV" | "cBridge" | "MAGIC";
    type: "ACTION" | "LIBRARY" | "VALIDATOR" | "COMPUTED_VARIABLE" | "VALIDATION_VARIABLE" | "GETTER" | "CALCULATOR" | "ORACLE" | "LIBRARY:VIEWONLY";
    method: "" | "symbol" | "sub" | "name" | "equal" | "uri" | "div" | "mod" | "decimals" | "approve" | "setApprovalForAll" | "borrow" | "deposit" | "getUserAccountData" | "removeLiquidity" | "simpleSwap" | "swap" | "addLiquidityETH" | "removeLiquidityETH" | "swapExactETHForTokens" | "swapExactTokensForETH" | "swapExactTokensForTokens" | "swapETHForExactTokens" | "swapTokensForExactETH" | "swapTokensForExactTokens" | "exactInputSingle" | "exactInput" | "supply" | "transferFrom" | "safeTransferFrom" | "getAmountsOut" | "getAmountsIn" | "getUserReserveData" | "getReserveConfigurationData" | "getReserveData" | "getReserveTokensAddresses" | "getAssetPrice" | "lessThan" | "between" | "greaterThan" | "totalSupply" | "isApprovedForAll" | "add_liquidity" | "repay" | "withdraw" | "swapBorrowRateMode" | "balanceOf" | "supportsInterface" | "simpleRemoveLiquidity" | "uniswapV3Swap" | "unoswap" | "repayWithATokens" | "setUserEMode" | "setUserUseReserveAsCollateral" | "mint" | "redeem" | "repayBorrow" | "enterMarkets" | "exitMarket" | "claimComp" | "supplyFrom" | "supplyTo" | "withdrawFrom" | "withdrawTo" | "remove_liquidity_one_coin" | "create_lock" | "increase_amount" | "increase_unlock_time" | "exchange" | "transfer" | "safeBatchTransferFrom" | "swapTo_noSlippageProtection" | "swap_noSlippageProtection" | "addLiquidity_noMinProtection" | "addLiquidityTo_noMinProtection" | "multicall" | "erc20Airdrop" | "erc20Approvals" | "erc20MonoTransfers" | "erc20Transfers" | "trasnfers" | "buyOnUniswapV2Fork" | "megaSwap" | "multiSwap" | "simpleBuy" | "swapOnUniswapV2Fork" | "swapOnZeroXv4" | "write_bytes" | "write_bytes32" | "write_fct_bytes" | "write_fct_bytes32" | "write_fct_uint256" | "write_uint256" | "send" | "sendNative" | "magic" | "getReserves" | "getReserveNormalizedIncome" | "getReserveNormalizedVariableDebt" | "getUserEMode" | "latestRoundData" | "getAccountLiquidity" | "markets" | "borrowBalanceCurrent" | "getAssetsIn" | "collateralBalanceOf" | "isBorrowCollateralized" | "userBasic" | "borrowBalanceOf" | "getAssetInfoByAddress" | "getPrice" | "compute" | "get_exchange_amount" | "calc_token_amount" | "get_best_rate" | "locked" | "allowance" | "getApproved" | "ownerOf" | "tokenURI" | "simulateSwap" | "multiAllowance" | "multiBalance" | "getSharesByPooledEth" | "getPooledEthByShares" | "sharesOf" | "getExchangeRate" | "getRethValue" | "getEthValue" | "getCollateralRate" | "read_bytes" | "read_bytes32" | "read_fct_bytes" | "read_fct_bytes32" | "read_fct_uint256" | "read_uint256" | "add" | "mul" | "mulAndDiv" | "betweenEqual" | "equalAddress" | "equalBytes32" | "greaterEqual" | "lessEqual" | "getEthBalance" | "validate";
    input: {
        to: string | import("../..").Variable;
        value: string | import("../..").Variable;
        methodParams: {};
    };
}>;
//# sourceMappingURL=plugins.d.ts.map