// // Init dotenv
import * as dotenv from "dotenv";

import { BatchMultiSigCall, ethers } from "../src";
import FCTData from "./mcallFct.json";

dotenv.config();

const randAddr = () => ethers.Wallet.createRandom().address;

async function main() {
  // const data = [
  //   "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000007b000",
  //   "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000007b",
  // ];
  //

  const firstEncode = ethers.utils.defaultAbiCoder.encode(["uint256[]"], [[123]]);
  const secondEncode = ethers.utils.defaultAbiCoder.encode(["uint256[]"], [[321]]);

  console.log(firstEncode);

  // Encode it into bytes[]
  const encoded = ethers.utils.defaultAbiCoder.encode(["bytes[]"], [[firstEncode, secondEncode]]);

  console.log(encoded);

  // 0x
  // 0000000000000000000000000000000000000000000000000000000000000020 - bytes[] offset
  // 0000000000000000000000000000000000000000000000000000000000000002 - bytes[] length
  // 0000000000000000000000000000000000000000000000000000000000000040 - firstEncode offset
  // 00000000000000000000000000000000000000000000000000000000000000c0 - secondEncode offset
  // 0000000000000000000000000000000000000000000000000000000000000060 - firstEncode length
  // 0000000000000000000000000000000000000000000000000000000000000020 - firstEncode[0] offset
  // 0000000000000000000000000000000000000000000000000000000000000001 - firstEncode[0] length
  // 000000000000000000000000000000000000000000000000000000000000007b - firstEncode[0] value
  // 0000000000000000000000000000000000000000000000000000000000000060 - secondEncode length
  // 0000000000000000000000000000000000000000000000000000000000000020 - secondEncode[0] offset
  // 0000000000000000000000000000000000000000000000000000000000000001 - secondEncode[0] length
  // 0000000000000000000000000000000000000000000000000000000000000141 - secondEncode[0] value
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exitCode = 1;
  });
